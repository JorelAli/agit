#!/bin/sh

VERSION="0.1"

# Formatting & Colors

RED="\e[31m"
GREEN="\e[32m"
CYAN="\e[36m"

DIM="\e[2m"
RESET="\e[0m"
BOLD="\e[1m"
UNDERLINE="\e[4m"

### General helper functions ###########################

stringContains() {
	if [[ $1 == *$2* ]]; then
		return 0 # Success
	else 
		return 1 # Error
	fi
}

### Variables ##########################################

branches=""
currentBranch=""

### Git helper commands ################################

getCurrentBranch() {
	currentBranch="$(git symbolic-ref HEAD | cut -d/ -f3-)"
}

getBranches() {
	branches="$(git for-each-ref refs/heads --format="%(refname)" | cut -d/ -f3- | tr '\n' ' ' | awk '{$1=$1};1')"
}

### Help printing ######################################

printMsg () {
	echo -e "$1${RESET}"
}

printHelp () {
	printMsg "Welcome to agit, a simple git interface. You are running agit ${CYAN}${VERSION}" 

	printMsg ""
	printMsg "Here's the list of commands:"
	printMsg ""
	printMsg "    ${UNDERLINE}${DIM}Information commands"
	printMsg "    ${CYAN}agit helper"
	printMsg "        Runs the ${CYAN}agit helper${RESET}. This helps identify any"
	printMsg "        issues with the state of the repository and advises you on"
	printMsg "        what you can do next if you get stuck."
	printMsg ""
	printMsg "    ${CYAN}agit info"
	printMsg "        Display the current working state. This will display"
	printMsg "        information on what branch you're in, what actions"
	printMsg "        are available and what you can do."
	printMsg ""
	printMsg "    ${UNDERLINE}${DIM}Main commands"
	printMsg "    ${CYAN}agit init"
	printMsg "        Sets up a default repository, and initializes agit for use."
	printMsg ""
	printMsg "    ${UNDERLINE}${DIM}Branch commands"
	printMsg "    ${CYAN}agit goto <branch>"
	printMsg "        Goes to a certain branch. This will create a new branch if"
	printMsg "        it doesn't already exist"
	printMsg ""
	printMsg "    ${CYAN}agit protect <branch>"
	printMsg "        Prevents a branch from being deleted"
	printMsg ""
	printMsg "    ${CYAN}agit ${RED}prune ${CYAN}<branch>"
	printMsg "        Destroys a branch. ${RED}This action cannot be reversed!"
	printMsg ""
	printMsg "    ${UNDERLINE}${DIM}Dangerous commands"
	printMsg "    ${BOLD}${RED}agit destroy"
	printMsg "        Destroys the entire ${CYAN}.agit${RESET} folder. This does not delete any"
	printMsg "        other files in this directory, but will destroy all information"
	printMsg "        that agit has about this repository. ${RED}This action cannot be reversed!"
	echo ""
}

########################################################

doHelper () {
	printMsg "Hi, I'm the ${CYAN}agit helper${RESET}. Let's try and resolve"
	printMsg "your problem!"
	if [ -d ".agit" ]; then
		:
	else 
		printMsg ""
		printMsg "${DIM}----------------------------------------------"
		printMsg "${DIM}Hey, you haven't set up a repository here yet."
		printMsg "${DIM}Try using ${CYAN}agit init${RESET}${DIM} to get started!"
		printMsg "${DIM}----------------------------------------------"
	fi
	printMsg ""
}

########################################################

askForConfirmation () {
	printf "Are you sure you want me to make these changes? [y/n] "
	read -n 1 input
	echo ""
	if [ "$input" == "y" ] || [ "$input" == "Y" ]; then
		return 0 # Success
	else 
		return 1 # Error
	fi
}

doInit () {
	if [ -d ".agit" ] || [ -d ".git" ]; then
		:
		# If there's a .git and no .agit...

		if [ ! -d ".agit" ] || [ -d ".git" ]; then
			:
		fi

	else 
		printMsg "I'm planning on setting up a new repository."
		printMsg "This will create a ${CYAN}.agit${RESET} folder in your current directory."
		printMsg ""

		askForConfirmation
		if [ $? -eq 0 ]; then
			mkdir ".agit"
			printMsg "I've created the ${CYAN}.agit${RESET} directory for you."
			git init -q

			if [ ! -f "./README.md" ]; then
				printMsg ""
				printMsg "I wasn't able to find a ${CYAN}README.md${RESET} file. Would you like me to make one?"
				printMsg "(Making a ${CYAN}README.md${RESET} will create a commit titled ${CYAN}Initial commit.${RESET})"

				askForConfirmation
				if [ $? -eq 0 ]; then
					printMsg ""
					echo "#$(basename $(pwd))" > README.md
					git add README.md
					git commit -q -m "Initial commit."

					printMsg "I've made a ${CYAN}README.md${RESET} file and made an initial commit."
				else 
					printMsg "Okay, I didn't make an initial file."
				fi
			fi
		else 
			printMsg "Sure thing, I've made no changes."
		fi
	fi
}

########################################################

doGoto() {
	targetBranch=$1

	getCurrentBranch
	if [ "$targetBranch" = "$currentBranch" ]; then
		echo "You're already in $targetBranch!"
		return
	fi

	getBranches
	stringContains "$branches" "$targetBranch"
	if [ $? -eq 0 ]; then
		git checkout -q $targetBranch
		printMsg "I've moved you from ${CYAN}$currentBranch${RESET} to ${CYAN}$targetBranch${RESET}."
	else
		printMsg "I'm planning on creating a new branch called ${CYAN}$targetBranch${RESET}."
		askForConfirmation
		if [ $? -eq 0 ]; then
			git checkout -qb $targetBranch
			printMsg "I've created the branch ${CYAN}$targetBranch${RESET} for you. You are currently in ${CYAN}$targetBranch${RESET}."
		else 
			printMsg "I've not made the branch ${CYAN}$targetBranch${RESET}. You are currently in ${CYAN}$currentBranch${RESET}."
		fi
	fi
}

########################################################

case $1 in
	help)
		printHelp;;

	helper)
		doHelper;;

	init)
		doInit;;

	goto)
		doGoto $2;;

	test)
		# getBranches
		# for branch in $branches; do
		# 	echo "$branch <-<"
		# done

		echo -e "${GREEN}hi"

		stringContains "master test" "test"
		if [ $? -eq 0 ]; then
			echo "yes"
		else
			echo "no"
		fi
		;;
	*)
		echo "Type 'agit help' for help" ;;
esac 
